---
title: "eyetools: an R package for open-source analysis of eye data"
shorttitle: "eyetools: eye data analysis"
author:
  - name: Tom Beesley
    corresponding: true
    orcid: 0000-0003-2836-2743
    email: t.beesley@lancaster.ac.uk
    affiliation: 
      - ref: LU
  - name: Matthew Ivory 
    affiliation: 
      - ref: LU
affiliations:
  - id: LU
    name: Lancaster University
    country: UK
    address: Department of Psychology, Lancaster University, UK, LA1 4YD
abstract: |
  | Abstract goes here 
keywords: [eye-tracking; fixations; saccades; areas-of-interest]
bibliography: bibliography.bib
format:
  apaquarto-pdf:
    link-citations: true
    numbered-lines: true
    fig-pos: 'H'
    documentmode: man
    keep-tex: true
    citeproc: false
    filters: 
      - at: pre-render
        path: "wordcount.lua"
execute:
  echo: true
  eval: true
  output: false
  warning: false
editor_options: 
  chunk_output_type: console
floatsintext: true
---

```{r, include=FALSE, message=FALSE}

#install_github("tombeesley/eyetools@0.7.3.9000")
library(eyetools)

```

Eye tracking is now an established and widely used technique in the behavioural sciences. Psychology is perhaps the scientific discipline which has seen the most sustantial adoption of eye-data research, where eye-tracking systems are now commonplace in centres of academic research. Beyond academic institutions, eye-tracking continues to be a useful tool in understanding consumer behaviour, user-interface design, and in various forms of entertainment.

By recording the movement of an individual's gaze during research studies, researchers can quantify where and how long individual's look at particular regions of space (usually with a focus on stimuli presented on a 2D screen, but also within 3D space). Eye-tracking provides a rich stream of continuous data and therefore can offer powerful insights into real-time cognitive processing. Such data allow researchers to inspect the interplay of cognitive processes such as attention, memory, and decision making, with high temporal precision [@beesley2019].

While there are abundant uses and benefits of collecting eye-movement data in psychology experiments, the continual stream of recording can lead to an overwhelming amount of raw data: modern eye-trackers can record data at 1000 Hz and above, which results in 3.6 million rows of data per hour. The provision of suitable computational software for data reduction and processing is an important part of eye-tracking research. The companies behind eye-tracking devices offer licensed software that will perform many of the necessary steps for eye-data analysis. However, there are several disadvantages to using such proprietary software in a research context. Firstly, the software will typically have an ongoing license cost for continual use. Secondly, the algorithms driving the operations within such software are not readily available for inspection. Both of these important constraints mean that the use of proprietary analysis software will lead to a failure to meet the basic open-science principle of analysis reproduction, for example as set out by the UK Reproducibility Network: "We expect researchers to... make their research methods, software, outputs and data open, and available at the earliest possible point...The reproducibility of both research methods and research results ...is critical to research in certain contexts, particularly in the experimental sciences with a quantitative focus..."

In the current article we introduce a new toolkit for eye-data processing and analysis called "*eyetools*", which takes the form of an R package. R packages (like R itself) are free to use without licence and are therefore available for any user across the world. The package provides a (growing) number of functions that provide an efficient and effective means to conduct basic eye-data analysis. *eyetools* is built with academic researchers in the psychological sciences in mind, though there is no reason why the package would not be effective more generally. The functions within the package reflect steps in a comprehensive analysis workflow, taking the user from initial handling of raw eye data, to summarising data for each period of a procedure, to the visualisation of the data in plots. We hope that the functions are simple enough to mean that the package is easy to use for researchers who are unfamiliar with working with eye data. It should also appeal to researchers accustomed to working with eye data in other environments who wish to transfer to working in R.

*eyetools* is, of course, not the only package in R that allows users to work with eye data. A recent assessment of available packages on CRAN identified six other packages that offer relevant functions for the analysis of eye data. **eyeTrackr**, **eyelinker**, and **eyelinkReader**, all offer functionality for data only from experiments that have used 'EyeLink' trackers (S-R Research). In contrast, eyetools provides functions that are hardware-agnostic, relying on a format of data that can be achieved from any data source. The **eyeRead** package is designed for the analysis of eye data from reading exercises. The **emov** package offers a limited set of functions and is primarily designed for fixation detection, using the same dispersion method employed in eyetools. Finally, **eyetrackingR** is perhaps the most comprehensive alternative package available on CRAN. eyetrackingR offers a large suite of functionality and, like eyetools, can be applied across the entire pipeline. It has functions for cleaning data and various plotting functions, including analysis over time. It does not feature algorithms regarding the detection of events such as saccades or fixations. This limits the ability to conduct more bespoke analysis steps and it means that analysis needs to be conducted on raw data. This is disadvantageous both in terms of computing time and in the open sharing of data (event data are an order of magnitude smaller in size than raw data). In comparison, eyetools enables easier data processing up to data analyses, making core tasks in the eye data processing easier and standardised.

| Package | Hardware-agnostic | Data Impor | Data processing | Identifies events | Plotting | Inferential Analysis |
|-----------|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
| eyetools | {{< fa check >}} | {{< fa check >}}\* | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |
| eyeTrackr |  | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |  |
| eyelinker |  | {{< fa check >}} |  |  |  |  |
| eyelinkReader |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |
| eyeRead | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}}\*\* |  |  |
| emov | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |  |
| eyetrackingR | {{< fa check >}} |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |

\* for Tobii data only, \*\* for text reading experiments only

In this tutorial we demonstrate the pipeline of analysis functions within *eyetools*. The package has been designed to be simple to use by someone with basic knowledge of data handling and analysis in R. This tutorial is separated into five distinct sections. In the first section, we briefly describe the basic methodology of collecting eye data in general, and in regard to the specific dataset we use to illustrate all the functionality of the *eyetools* package. The second section covers the process for getting data from an eye tracker into an *eyetools*-friendly format. The third section introduces the foundational functions of the *eyetools* package, from repairing and smoothing eye data, to calculating fixations and saccades, and detecting time spent in Areas of Interest (AOIs). The fourth section takes the processed data, and applies basic analysis techniques commonplace in eye data research. In the fifth and final section, we reflect on the benefits of the *eyetools* package, including contributions to open science practices, reproducibility, and providing clarity to eye data analysis.

## Installing eyetools

*eyetools* is available on CRAN and can be installed with the command `install.packages("eyetools")`. Instructions for installing development versions can be found at the package repository: <https://github.com/tombeesley/eyetools/>. Once installed, the package can be loaded into R with the command `library(eyetools)`.

## Preparing data for eyetools

Since there is a wide range of eye tracking hardware available for researchers to use, *eyetools* currently offers only a limited number of functions for converting raw data from specific hardware. The `hdf5_to_dataframe()` function is designed to work with output from PsychoPy experiments connected to modern Tobii hardware, and will take this default format of raw data and convert it into the simplified raw data format required for *eyetools*.

The *eyetools* package has been developed primarily with the analysis of experimental psychology data in mind. To this end, many of the functions expect a "trial" variable in the data, such that the algorithms will operate over multiple trials and produce output that retains this trial information. Similarly, data in psychology experiments tends to come from multiple participants, and to facilitate analysis, a participant ID column can be included (though this isn't necessary). This allows many functions to be run automatically across multiple participants (rather than running the same function on each participant's data). It is also necessary to select the relevant "periods" of data within the recording. It is quite typical in psychology experiments for there to be multiple periods within a trial, e.g., fixation; stimulus presentation; response feedback; inter-trial-interval. *eyetools* does not interpret these changes, and so it is necessary to first select the data for the period or periods that are of interest for analysis. Analysis on each period would be conducted separately using the functions in *eyetools*.

The starting point for the analysis pipeline is the preparation of the raw eye data, which will consist of recorded samples from the eye-tracker, with each row in the data reflecting a single time-stamped recording. If the eye-tracker is set at 1000Hz, then consecutive recordings will be 1 millisecond of time apart; at 300Hz, the recordings are 3.33 milliseconds apart. The only requirement for the time column is that the values reflect a consistent and increasing set of values. There is no need to specify the sampling rate, since *eyetools* functions will calculate this automatically. *eyetools* expects raw data to have the following columns:

-   x = horizontal spatial coordinate of the estimated eye position

-   y = vertical spatial coordinate of the estimated eye position

-   time = timestamp of the recording

-   trial = an index of the current trial in the data

-   pID = an index of the current participant in the data (optional)

Missing values in the x and y columns of the raw data should be expressed as "NA".

For many methods of eye-tracking, binocular data will be produced. In such cases, since the primary aim of our analyses is the estimation of the spatial coordinates of gaze, the function `combine_eyes()` should be used to combine the data to form a set of monocular data. This function takes raw data with coordinates for each eye (i.e., left_x, right_x, left_y, right_y), and converts the data into single x and y coordinates. By default, the function does this by taking an average of the coordinates from the two eyes of each timestamp, but it is also possible to select data from the eye with the lowest proportion of missing samples. This returns a flattened list of participant data that has x and y variables in place of the left\_\* and right\_\* variables.

```{r}
#| output: true

head(HCL,4) # first 4 rows of the built-in data

data <- combine_eyes(HCL) # create monocular data 

head(data, 4) # first 4 rows of the monocular data

```

## Repairing missing data and smoothing data

Despite the best efforts of the researcher, there are occasional failures in the accurate recording of the eye position during data collection (e.g., blinks). This results in missing data within the stream of samples, which must be represented in eyetools as NA values for the x and y coordinates. To mitigate the impact of missing data on further analysis, the `interpolate()` function can estimate the missing gaze data, based upon the eye coordinates before and after the missing data, and perform a repair. The default method of linear interpolation ("approx") replaces missing values with a line of constant slope and evenly spaced coordinates reaching the existing data (alternatively a cubic "spline" method can be applied).

```{r}
#| eval: false
data <- interpolate(data, 
                    method = "approx",
                    participant_ID = "pNum")

```

When using `interpolate()`, a report can be requested on the proportion of missing data that has been replaced. This parameter changes the output format of the function, and returns a list of both the data and the report. The report alone can be easily accessed in the following way:

```{r}
#| output: true
interpolate(data, 
            method = "approx",
            participant_ID = "pNum", 
            report = TRUE)[[2]]
```

As shown, not all missing data has been replaced, since there are certain periods in which the missing data span a period longer than the default setting of the "maxgap" parameter, which is 150 ms.

Once interpolation has been performed, a common step is to smooth the eye data to minimise the effect of measurement error on the data. The function `smoother()` reduces the noise in the data by applying a moving average function. The degree of smoothing can be specified, and a plot can be generated (using data from a randomly selected trial) to observe how well the smoothed data fits the raw data.

```{r, message=FALSE}
data <- smoother(data,
                 span = .02,
                 participant_ID = "pNum", 
                 plot = TRUE)
```

## Working with eyetools

Having explained these rudimentary steps of getting the data ready analysis, we will now describe the core functions available in the latest version of eyetools. For illustration, eyetools has a built in data set that meets the required format. The data set consists of data from two participants from a human causal learning study [@beesley2015]. The nature of this experiment is largely unimportant for the current purposes, but for clarity, the data were collected from the decision period of the procedure, where two rectangular cue stimuli were presented in the top half of the screen, one on the left side and one on the right side. Two smaller response options were presented in the lower half of the screen, one above the other. Participants simply had to look at the cues and choose a response. These raw data can be accessed by calling `HCL` and the associated "areas of interest" (described later) can be called by using `HCL_AOIs`.

### Counterbalanced designs

Many psychology experiments will counterbalance the position of important stimuli on the screen. For example, in the example data we are using, there are two stimuli, with one of these appearing on the left side of the screen and the other on the right. In the design of the experiment, one of these stimuli can be considered a "target" and the other a "distractor", and the experiment counterbalances whether these are positioned in a left/right or a right/left arrangement across trials. In order to provide a meaningful analysis of the eye position over all trials, it is necessary to standardise the data, such that the resulting analyses reflect meaningful eye gaze on each type of stimulus (target or distractor).

*eyetools* has a built in function, `conditional_transform()`, which allows us to *transform* the x and/or y values of the stimuli so as to take into account a counterbalancing variable. This function currently allows for a single-dimensional transformation, across either the horizontal or vertical midline. It can be used on raw data or fixation data; we simply need to append a column to the data to reflect the counterbalancing variable. The result of the function is a set of data in which the x (and/or y) position is consistent across counterbalanced conditions (e.g., in our example, we can transform the data so that the target cue is always on the left). This transformation is especially useful for future visualisations and calculation of time on areas of interest. Note that `conditional_transform()` operates on trials independently, and so does not discriminate between multi-participant and single-participant data and so no participant_ID parameter is required.

In our example data, the stimuli were presented on either the left or the right side of the screen. Here we have merged the eye data with a set of "trial_events" data that describe the events on each trial. We can apply `conditional_transform()` and specify the relevant column (cue_order) that controls the counterbalancing, and the relevant value that signals a switch of position (here the value "2"). The resulting transformation of the data will mean that the data is normalised such that the target stimulus is always positioned on the left side of the screen.

```{r}



data <- merge(data, HCL_behavioural) # merges with the common variables pNum and trial

data <- 
  conditional_transform(data, 
                        flip = "x", #flip across x midline
                        cond_column = "cue_order", # counterbalance column 
                        cond_values = "2",# values to flip
                        message = FALSE) # suppress output message

```

## Fixations

Once the data has been repaired and smoothed, a core step in eye data analysis is to identify fixations [@salvucci2000]. Broadly, a fixation is defined as a period in which gaze stops in a specific location for a given amount of time. The period in which the eyes are moving between fixations reflects a "saccade". As such, raw data can be transformed into these meaningful eye data characteristics. These different properties of eye-data have important implications for behavioural research (see X for a review). Beyond their importance for understanding psychological processes, transforming the data into fixations and saccades leads to greater computational efficiency. For example, the built in HCL data in eyetools is 479 kb, which contains 31,041 rows of data (12 trials of data). After processing the data for fixations, the resulting data is 269 rows and can be saved as 3.8 kb (less than 1% the size of the raw data). Not only is this more computationally efficient, but it also means the data are now in a far more practical format for storage in online data repositories.

There are two fixation algorithms offered in the *eyetools* package, both based on methods presented by [@salvucci2000]. The first, `fixation_dispersion()` seeks periods of low variability in the spatial component of the data; the algorithm looks for sufficient periods of time in which the gaze position remains within a tolerated maximum range of dispersion. Once this range is exceeded, this is deemed to be the end of a possible period of fixation. If the total time of this fixation period is longer than the minimum required (set by the `min_dur` parameter), then the fixation is stored as a record in the returned object.

The second algorithm, `fixation_VTI()` , employs a velocity-threshold approach to identifying fixations, based on the algorithm described in \[@salvucci2000\]. Since points of fixation occur when the eye is not in consistent motion, the algorithm computes the euclidean distance between points and then determines the velocity of the eye. Periods in which this velocity is consistently below the velocity threshold (for which the default is 100 degrees of visual angle per second) are identified as a potential period of fixation. The algorithm then applys a dispersion check to ensure that the eye maintains a relatively stable position across this period. If this dispersion threshold is exceeded, then a new fixation is determined. Fixations must be of a minimum length for classification (by default 150 ms).

Here we can see the example data passed to the `fixation_dispersion()` algorithm and the resulting fixations that are returned.

```{r}
#| output: true

fixations <- 
  fixation_dispersion(data,
                      min_dur = 150, # Min duration in ms
                      disp_tol = 100, # Max dispersion tolerance in pixels
                      NA_tol = 0.25, # proportion of NAs tolerated 
                      progress = FALSE, # toggle progress bar
                      participant_ID = "pNum") 

head(fixations, 4)
```

## Area of interest (AOI) analysis

Once fixations have been calculated, they can be used in conjunction with Areas of Interest (AOIs) to determine the sequence in which the eye enters and exits these areas, as well as the time spent in these regions. When referring to AOIs, these often refer to the cues presented and the outcome object. In our example, the two cues at the top of the screen are the cues, and the outcome is at the bottom. We can define these areas in a separate dataframe object by giving the centrepoint of the AOI in x, y coordinates along with the width and height (if the AOIs are rectangular) or just the radius (if circular).

```{r}

# set areas of interest
AOI_areas <- create_AOI_df()

AOI_areas[1,] <- c(460, 840, 400, 300) # Left cue
AOI_areas[2,] <- c(1460, 840, 400, 300) # Right cue
AOI_areas[3,] <- c(960, 270, 300, 500) # outcomes

```

In combination with the fixation data, the AOI information can be used to determine the sequence of AOI entries using the `AOI_seq()` function. This fucntion checks whether a fixation is detected within an AOI, and if not, it is dropped from the output, and then provides a list of the sequence of AOI entries, along with start and end timestamps, and the duration.

```{r}
data_AOI_entry <- AOI_seq(fixations, AOIs = AOI_areas,
                          AOI_names = c("predictive", "non-predictive", "target"),
                          participant_ID = "pNum")
```

Time spent in AOIs can also be calculated from fixations or raw data using the `AOI_time()` function available. This calculates the time spent in each AOI in each trial, based on the data type given, in our case fixation data.

```{r}

data_AOI_time <- AOI_time(fixations, data_type = "fix", AOIs = AOI_areas,
                          AOI_names = c("predictive", "non-predictive", "target"),
                          participant_ID = "pNum")

```

If choosing to work with the raw data, there is also the option of using `AOI_time_binned()` which allows for the trials to be split into bins of a given length, and the time spent in AOIs calculated as a result.

```{r}
data_AOI_time_binned <- AOI_time_binned(data, AOIs = AOI_areas,
                                        AOI_names = c("predictive", "non-predictive", "target"),
                                        bin_length = 100,
                                        max_time = 2000, #in milliseconds
                                        participant_ID = "pNum")
```

## Saccades

Additionally, in certain analyses it may be useful to extract the saccades themselves. This can be achieved using the `saccade_VTI()` function.

```{r}

saccades <-    saccade_VTI(data,
                           threshold = 150,
                           min_dur = 20,
                           participant_ID = "pNum")
```

## Visualisations

## eyetool assumptions \[I DON'T KNOW WHERE THIS SHOULD GO JUST YET\]

As with any data processing or analysis, there are certain assumptions made when developing the eyetools package. Some of these are built into the package directly, either as errors or warnings, such as the assumption that data is ordered by participant ID (if present) and trial, and some are not built in because they would limit the flexibility of the package functionality. One built-in assumption is the handling of missing data. eyetools expects track loss to be represented as NA within the data, and so any system that provides a different convention for recording track loss needs to be changed prior to using eyetools functions.

During development, eyetools was tested using data collected from a Tobii Pro Spectrum eye tracker recording at 300Hz. Screen resolutions were constant at 1080x1920 pixels, and the timestamps were recorded in milliseconds. Whilst most of the functions were designed to work with any hardware provided the data is formatted to eyetools expectations (with the exception of `hdf5_to_df()` and `hdf5_get_event()` as these convert Tobii data), as well as not relying on specific frequencies or resolutions (either through the function behaviour, or by supplying parameters for specificity), eyetools has not been tested on a diverse set of datasets.

Some default behaviours are in-built, but are easily overrided such as parameters for resolution in the plotting functions. Similarly `saccade_VTI()` and `fixation_VTI()` were tested with 300Hz data. For these functions, as the frequency increases, the relative saccadic velocities will be lower meaning that the thresholds need to be reduced. This is important to note when working with data that is not recorded at 300Hz. To circumvent the potential issue of sample rates being an issue, by default functions that require a sample rate will deduce the frequency from the data rather than needing it to be specified.

## Visualisations made easy

When working with eye data, it can be beneficial for the researcher to familiarise themselves with the dataset. Visualising the data through graphics can help to identify meaningful patterns that are obscured when relying on statisitical analyses alone [@kabacoffActionThirdEdition2022]. Graphics are also very effective at conveying information in a way that is easily grasped by a diverse audience. eyetools offers a selection of in-built plotting functions that work with data at most stages of processing. These plots are designed to aid in the researcher's processing and data analysis.

The `plot_AOI_growth()` function offers the representation of how an individual (on a single trial) spends their time looking at the different AOIs. This can be useful to see how AOIs are interacted with over time, and this can be presented as either a cumulative over time, or as a proportion of the time spent in the trial.

::: {#fig-growth layout-ncol="2"}
```{r}
#| label: fig-abs

# plot absolute and then proportional
plot_AOI_growth(data = data, AOIs = HCL_AOIs, type = "abs", trial_number = 1)
```

```{r}
#| label: fig-prop

plot_AOI_growth(data = data, AOIs = HCL_AOIs, type = "prop", trial_number = 1)
```

Examples of the absolute and proportional time plots from `plot_AOI_growth()`
:::

A heatmap of eye gaze positions can be generated using `plot_heatmap()` which takes raw data as an input. As a function, and unlike many of the processing steps, it does not differentiate between trials or participants and plots any coordinate data it is given. This behaviour is allowed as the heatmap offers an excellent and fast "sanity check" that participants were, on the whole, looking at the expected areas of the experiment screen during the trials. As can be seen in Figure @fig-heatmap, we can be reassured that participants do indeed spend most of their time looking at the stimuli on screen rather than in the empty space. `plot_heatmap()` also allows for the modification of the amount of data displayed, using the `alpha_control` parameter. By decreasing `alpha_control` in Figure @fig-heatmap-alpha-update, we gain more visualised information and we can still see that the majority of the data is kept within the stimuli and saccades between these areas.

```{r}
#| fig-cap: A heatmap overlaid upon a sample stimuli image demonstrating where the participants looked most over all trials
#| label: fig-heatmap

plot_heatmap(data, bg_image = "images/HCL_sample_image.jpg")
```

```{r}
#| fig-cap: A heatmap overlaid upon a sample stimuli image demonstrating where the participants looked most over all trials
#| label: fig-heatmap-alpha-update

plot_heatmap(data, alpha_control = .001)
```

The `plot_seq()` function allows for the plotting of raw data to visualise the gaze pattern from a single trial and where the gaze fell on the screen across the entire trial. @fig-seq offers an example trial split into time bins of 5000ms. This plot shows the time dimension as a change in colour that overlaps older data. This plot serves as a useful check, similar to `plot_heatmap()`, as to where the eyes spent their time, but `plot_seq()` has the benefit of showing the time dimension compared to a simple heatmap.

```{r}
#| label: fig-seq
#| fig-cap: The output from plot_seq() with included AOIs and time binned into 5 second sections

# plot raw data with bins
plot_seq(data = data[data$pNum == 118,], AOIs = HCL_AOIs,  bin_time = 5000, trial_number = 1)
```

The final plotting function in eyetools is `plot_spatial()`. This can plot raw data, fixations, and saccades, either separately or in combination. `plot_spatial()` plots the location of the eye gaze of a trial, and when given raw data is very similar to the output of `plot_seq()`, when using fixation data, then an additional parameter can be used to label the fixations in their temporal order, enabling a better presentation of how fixations arise. Finally, providing saccade data allows for the length and direction of saccades to be presented.

::: {#fig-spatial layout-ncol="3"}
```{r}
#| label: fig-spatial-raw

plot_spatial(raw_data = data[data$pNum == 118,], trial_number = 1)
```

```{r}
#| label: fig-spatial-fix

# plot just fixation data together
plot_spatial(fix_data = fixations[fixations$pNum == 118,], trial_number = 1)
```

```{r}
#| label: fig-spatial-sac

#plot saccades
plot_spatial(sac_data = saccades[saccades$pNum == 118,], trial_number = 1)

```

The three types of plot that can be created using `plot_spatial()`
:::

# Analysing eye data

\@tom

# Discussion

In the present tutorial, we began by identifying the current gap in available tools for working with eye data in open-science pipelines. We then provided an overview of the general data collection process required for eye tracking research, before detailing the conversion of raw eye data into a useable *eyetools* format. We then covered the entire processing pipeline using functions available in the *eyetools* package that included the repairing and normalising the data, and the detection of events such as fixations, saccades, and AOI entries. \@SOMETHING_ON_THE_ANALYSIS_GOES_HERE.

From a practical perspective, this tutorial offers a step-by-step walkthrough for handling eye data using R for open-science, reproducible purposes. It provides a pipeline that can be relied upon by novices looking to work with eye data, as well as offering new functions and tools for experienced researchers. By enabling the processing and analysis of data in a single R environment it also helps to speed up data analysis.

## Advantages of Open-Source Tools

eyetools offers an open-source toolset that holds no hidden nor proprietary functionality. The major benefits of open-source tools are extensive, but the main ones include the ability to explore and engage with the underlying functions to ensure that

A collaborative community - with open source tools, if an unmet need is identified, then the community can work to provide a solution.

## Good Science Practices with eyetools

Creating savepoints (like having processed raw data, and then post-fixation calculation). Reduces the need to completely rework workflows if an issue is detected as savepoints can be used to ensure that computationally-intense or time-heavy processes are conducted as infrequently as possible.

# Data Availability

The data required for reproducing this tutorial is available at: \@URL. A condensed version of the dataset (starting with the `combine_eyes()` function) is a dataset in the *eyetools* package called HCL.

# Code Availability

The code used in this tutorial is available in the reproducible manuscript file available at:(IF STORING IN GITHUB, THEN WE NEED TO CREATE A ZENODO SNAPSHOT FOR A DOI RATHER THAN JUST A GITHUB LINK)

# References

<!-- References will auto-populate in the refs div below -->

::: {#refs}
:::
