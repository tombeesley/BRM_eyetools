---
title: "eyetools: A set of tools for eye data processing, analysis and visualisation in R"
subtitle: "EPS - Lancaster - 4th April 2025"
author: "Tom Beesley and Matthew Ivory"
format: 
  revealjs:
    theme: [simple, custom.scss]
    slide-number: c/t
    footer: "github.com/tombeesley/eyetools | install.packages('eyetools')"
    logo: LU_logo.jpg
    transition: fade
  html:
    mermaid:
      theme: forest
title-slide-attributes: 
  data-background-image: LU_logo.jpg
  data-background-size: 15%
  data-background-position: 5% 80%
highlight-style: arrow
width: 1920
height: 1080
margin: 0.1
editor_options: 
  chunk_output_type: console
execute: 
  cache: true
bibliography: references.bib
---

## Reproducible analyses {.nostretch}

**UK Reproducibility Network:** "The reproducibility of both research methods and research results is critical to research in certain contexts, particularly in the experimental sciences with a quantitative focus."
<br/><br/>
![](github_ss.png){fig-align="left" width="700"}

## R packages for eye data analysis {.smaller}

| Package | Hardware-agnostic | Data Import | Data processing | Identifies events | Plotting | Inferential Analysis |
|-----------|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
| **eyetools** | {{< fa check >}} | {{< fa check >}}\* | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |
| eyeTrackr |  | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |  |
| eyelinker |  | {{< fa check >}} |  |  |  |  |
| eyelinkReader |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |
| eyeRead | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}}\*\* |  |  |
| emov | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |  |
| eyetrackingR | {{< fa check >}} |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |

\* for Tobii data only, \*\* for text reading experiments only

## Introducing "eyetools" {.nostretch}

:::: columns
::: {.column width="45%"}
### R packages:

-   Can be installed freely by anyone in the world
-   Offer functions centred on a particular use case
-   Provide documentation and full disclosure of methods

Eyetools is available on CRAN:

```{r install}
#| eval: false
#| echo: true
#| output: false

install.packages("eyetools")

library(eyetools) 

```

```{r load}
#| eval: true
#| echo: false

# hidden loading and setting of variables
library(eyetools)
library(ggplot2)

HCL_AOIs[3,2] <- 290
HCL_AOIs[3,4] <- 520

```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
![](mermaid_flow.png){width="800"}
:::
::::

## Data format
:::: columns
::: {.column width="46%"}
There is built in data from a simple experimental task, which shows you the requirements of the package:

```{r show_data}
#| eval: true
#| echo: true
#| output: true
 
head(HCL,8) # first 4 rows of the built-in data

```
:::

::: {.column width="8%"}
:::

::: {.column width="46%"}
Binocular data needs to be combined to produce monocular data:

```{r combine_eyes}
#| eval: true
#| echo: true
#| output: true
 
data <- combine_eyes(HCL) # create monocular data

head(data, 8)

```
:::

::::

## Computing trial events - Fixations

Eyetools features two fixation algorithms, one based on dispersion of data, the other based on velocity. 
Algorithms are based on methods in @salvucci2000.

```{r fix_disp}
#| eval: true
#| echo: true
#| output: true
#| cache: true

fix <- fixation_dispersion(data)

head(fix, 10)

```

## Computing trial events - Saccades

Eyetools can also extract saccades. Again, based on methods in @salvucci2000.

```{r sac}
#| eval: false
#| echo: true
#| output: false

sac <- saccade_VTI(data)

head(sac, 10)

```

```{r sac_2}
#| eval: true
#| echo: false
#| output: true

options(width = 200)

# REMOVE WHEN FIXED SACCADE ALGORITHM IN LATEST VERSION
load("dummy_sac_data.RData")

head(sac, 10)

```


## Plotting data

Plotting all the data from one participant:

```{r plot_spatial_1}
#| echo: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix,
                  pID_values = 118,
                  show_fix_order = FALSE)
p + theme_classic(base_size = 18) # it's a ggplot object...

```

## Plotting data

Selecting data from participants and trials

```{r plot_spatial_2}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2)
#
```

```{r plot_spatial_2_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2)

p + theme_classic(base_size = 18)
```

## Plotting data

Adding saccades to the plot:

```{r plot_spatial_3}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             sac_data = sac, 
             pID_values = 118, 
             trial_values = 2)

```

```{r plot_spatial_3_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             sac_data = sac, 
             pID_values = 118, 
             trial_values = 2)

p + theme_classic(base_size = 18)
```

## Plotting data

Adding a background image

```{r plot_spatial_4}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2, 
             bg_image = "images/HCL_sample_image.png")

```

```{r plot_spatial_4_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2, 
             bg_image = "images/HCL_sample_image.png")

p + theme_classic(base_size = 18)
```

## Plotting data {.nostretch}

Plotting data over the course of a trial: plot_seq()

::::: columns
::: {.column width="40%"}
```{r plot_seq_1}
#| eval: false
#| echo: true
#| output: false

plot_seq(data = data,
         AOIs = HCL_AOIs,
         bg_image = 
           "images/HCL_sample_image.png",
         pID_values = 118, 
         trial_values = 2,
         bin_time = 1000)

```
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r plot_seq_1_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 15
#| fig-height: 10

plot_seq(data = data,
         AOIs = HCL_AOIs,
         bg_image = "images/HCL_sample_image.png",
         pID_values = 118, 
         trial_values = 2,
         bin_time = 1000) +
  theme_classic(base_size = 18)
```
:::
:::::

## Plotting data

Plotting data over the course of a trial: plot_AOI_growth()

```{r plot_AOI_growth}

#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9
#| 
plot_AOI_growth(data = data, 
                AOIs = HCL_AOIs, 
                type = "abs", 
                pID_values = 118, 
                trial_values = 5,
                AOI_names = c("left", "right", "lower"))
```

## Heatmaps!

::::: columns
::: {.column width="48%"}
```{r}
#| eval: true
#| echo: true
#| output: true
#| fig-width: 10
#| fig-height: 6

plot_heatmap(data = data, 
             plot_type = "density", 
             bg_image = "images/HCL_sample_image.png")


```
:::

::: {.column width="48%"}
```{r}
#| eval: true
#| echo: true
#| output: true
#| fig-width: 10
#| fig-height: 6

plot_heatmap(data = data, 
             plot_type = "hex", 
             bg_image = "images/HCL_sample_image.png")


```
:::
:::::

## Analysing areas of interest (AOIs)

:::::: columns
::: {.column width="45%"}
AOIs can be defined. Here are the built in ones:

```{r create_AOI}
#| echo: true

# Define AOIs
HCL_AOIs
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
These can be plotted:

```{r plot_AOI}
#| eval: false
#| echo: true
#| output: false

# plot those AOIs
plot_spatial(AOIs = HCL_AOIs,
             bg_image = "images/HCL_sample_image.png")

```

```{r plot_AOI_eval}
#| eval: true
#| echo: false
#| output: true

# plot those AOIs
plot_spatial(AOIs = HCL_AOIs,
             bg_image = "images/HCL_sample_image.png") +
  theme_classic(base_size = 18)

```
:::
::::::

## Analysing areas of interest (AOIs)

::::: columns
### AOI_time: Calculate time on areas of interest

::: {.column width="60%"}
```{r}
#| echo: true
#| output: false


aoi_time_result <- AOI_time(data = fix,
                            data_type = "fix",
                            AOIs = HCL_AOIs,
                            AOI_names = c("left", "right", "lower"))

library(tidyverse)

aoi_time_result %>% 
  filter(pID == 118) %>% 
  arrange(trial)

```
:::

::: {.column width="40%"}
```{r}
#| echo: false
#| output: true

aoi_time_result %>% 
  filter(pID == 118) %>% 
  arrange(trial)

```
:::
:::::

## Analysing areas of interest (AOIs)

### AOI_seq: Calculate sequence of entries into areas of interest

```{r}
#| echo: true
#| output-location: column

aoi_seq_result <- AOI_seq(data = fix, 
                          AOIs = HCL_AOIs, 
                          AOI_names = c("left", "right", "lower"))

head(aoi_seq_result, 11)

```

## eyetools summary

::: incremental
-   open source R package for reproducible eye data analysis

-   simple to use, with just a basic understanding of R

-   simplifies essential parts of the eye data workflow

-   creates standard objects, such as ggplot figures and dataframes/tibbles

-   BRM manuscript forthcoming

-   install with: `install.packages("eyetools")`

-   suggest features at: **github.com/tombeesley/eyetools**

:::

::: {.fragment}

Thank you! 

Tom Beesley - Lancaster University - t.beesley@lancaster.ac.uk
::: 

## References
