---
title: "eyetools - EPS April 2025"
author: "Tom Beesley and Matthew Ivory"
format: 
  revealjs:
    theme: [serif, custom.scss]
width: 1920
height: 1080
margin: 0.03
editor_options: 
  chunk_output_type: console
---

## Reproducible analyses

UK Reproducibility Network: "We expect researchers to... make their research methods, software, outputs and data open, and available at the earliest possible point...The reproducibility of both research methods and research results ...is critical to research in certain contexts, particularly in the experimental sciences with a quantitative focus..."

::: incremental
### R packages:
-   Can be installed freely by anyone in the world
-   Offer functions centred on a particular use case
-   Provide documentation and full disclosure of methods
:::

## R packages for eye data analysis {.smaller}

| Package | Hardware-agnostic | Data Import | Data processing | Identifies events | Plotting | Inferential Analysis |
|-----------|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
| **eyetools** | {{< fa check >}} | {{< fa check >}}\* | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |
| eyeTrackr |  | {{< fa check >}} | {{< fa check >}} | {{< fa check >}} |  |  |
| eyelinker |  | {{< fa check >}} |  |  |  |  |
| eyelinkReader |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |
| eyeRead | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}}\*\* |  |  |
| emov | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |  |  |
| eyetrackingR | {{< fa check >}} |  | {{< fa check >}} |  | {{< fa check >}} | {{< fa check >}} |

\* for Tobii data only, \*\* for text reading experiments only

## Introducing "eyetools"


eyetools is available on CRAN, so it is very easy to install and load:

```{r install}
#| eval: false
#| echo: true
#| output: false

install.packages("eyetools")

library(eyetools) # load

```

```{r load}
#| eval: true
#| echo: false
library(eyetools)
library(ggplot2)

HCL_AOIs[3,2] <- 290
HCL_AOIs[3,4] <- 520

```

Here's the complete list of available functions:

```{r function_list}
#| eval: true
#| echo: true

ls("package:eyetools")

```

## Data format

:::: {.columns}

::: {.column width="45%"}

There is built in data from a simple experimental task, which shows you the requirements of the package:



```{r show_data}
#| eval: true
#| echo: true
#| output: true
 
head(HCL,8) # first 4 rows of the built-in data

```

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
Binocular data needs to be combined to produce monocular data:

```{r combine_eyes}
#| eval: true
#| echo: true
#| output: true
 
data <- combine_eyes(HCL) # create monocular data

head(data, 8)

```
:::

::::

```{r int_smooth}
#| eval: true
#| echo: false

# interpolation and smoothing stages not shown in presentation

data <- interpolate(data)
data <- smoother(data)
```

## Transforming data




## Computing trial events

A primary step in eye data analysis is the extraction of fixations and saccades. Eyetools features two fixation algorithms and one saccade algorithm:

::: {.panel-tabset}

### Fixations

```{r fix_disp}
#| eval: true
#| echo: true
#| output: true
#| cache: true

fix <- fixation_dispersion(data)

head(fix, 4)

```


### Saccades

```{r sac}
#| eval: false
#| echo: true
#| output: false

sac <- saccade_VTI(data)

head(sac, 4)

```

```{r sac_2}
#| eval: true
#| echo: false
#| output: true

# REMOVE WHEN FIXED SACCADE ALGORITHM IN LATEST VERSION
load("dummy_sac_data.RData")

head(sac, 4)

```

:::

## Plotting data 

Plotting all the data from one participant:

```{r plot_spatial_1}
#| echo: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix,
                  pID_values = 118,
                  show_fix_order = FALSE)

p + theme_classic(base_size = 18) # it's a ggplot object...

```

## Plotting data 

Selecting data from participants and trials

```{r plot_spatial_2}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2)

```

```{r plot_spatial_2_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2)

p + theme_classic(base_size = 18)
```

## Plotting data

Adding saccades to the plot:

```{r plot_spatial_3}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             sac_data = sac, 
             pID_values = 118, 
             trial_values = 2)

```

```{r plot_spatial_3_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             sac_data = sac, 
             pID_values = 118, 
             trial_values = 2)

p + theme_classic(base_size = 18)
```
## Plotting data

Adding a background image

```{r plot_spatial_4}
#| eval: false
#| echo: true
#| output: false

plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2, 
             bg_image = "images/HCL_sample_image.png")

```

```{r plot_spatial_4_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

p <- plot_spatial(fix_data = fix, 
             pID_values = 118, 
             trial_values = 2, 
             bg_image = "images/HCL_sample_image.png")

p + theme_classic(base_size = 18)
```
## Analysing areas of interest (AOIs)

:::: {.columns}

::: {.column width="45%"}

AOIs can be defined. Here are the built in ones:

```{r create_AOI}
#| echo: true

# Define AOIs
HCL_AOIs
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

These can be plotted:

```{r plot_AOI}
#| eval: false
#| echo: true
#| output: false

# plot those AOIs
plot_spatial(AOIs = HCL_AOIs,
             bg_image = "images/HCL_sample_image.png")

```
```{r plot_AOI_eval}
#| eval: true
#| echo: false
#| output: true

# plot those AOIs
plot_spatial(AOIs = HCL_AOIs,
             bg_image = "images/HCL_sample_image.png") +
  theme_classic(base_size = 18)

```
:::

::::


## Analysing areas of interest (AOIs)

These AOIs can be used in the following analysis functions:

::: {.panel-tabset}

### AOI_time

Calculate time on areas of interest
```{r}
#| echo: true
#| output-location: column

aoi_time_result <- AOI_time(data = fix,
                            data_type = "fix",
                            AOIs = HCL_AOIs,
                            AOI_names = c("left", "right", "lower"))

head(aoi_time_result, 18)

```

### AOI_seq

Calculate sequence of entries into areas of interest
```{r}
#| echo: true
#| output-location: column

aoi_seq_result <- AOI_seq(data = fix, 
                          AOIs = HCL_AOIs, 
                          AOI_names = c("left", "right", "lower"))

head(aoi_seq_result, 11)

```

### plot_seq

We can also plot the progression of data over the course of a trial

```{r plot_seq_1}
#| eval: false
#| echo: true
#| output: false

plot_seq(data = data,
         AOIs = HCL_AOIs,
         bg_image = "images/HCL_sample_image.png",
         pID_values = 118, 
         trial_values = 2,
         bin_time = 1000)

```

```{r plot_seq_1_eval}
#| eval: true
#| echo: false
#| output: true
#| fig-width: 16
#| fig-height: 9

plot_seq(data = data,
         AOIs = HCL_AOIs,
         bg_image = "images/HCL_sample_image.png",
         pID_values = 118, 
         trial_values = 2,
         bin_time = 1000) +
  theme_classic(base_size = 18)
```



